#!/usr/bin/env node
//@ts-check

/* eslint-disable @typescript-eslint/no-var-requires */

const ExitCodes = {
    Ok: 0,
    OptionError: 1,
    NoEntryPoints: 2,
    CompileError: 3,
    ValidationError: 4,
    OutputError: 5,
    ExceptionThrown: 6,
};

const td  = require("..");
const { getOptionsHelp } = require("../dist/lib/utils/options/help");
const { ApplicationEvents } = require("../dist/lib/application-events");

const app = new td.Application();

app.on(ApplicationEvents.READER_INIT, (app, readers) => {
    readers.push(new td.ArgumentsReader());
    readers.push(new td.TypeDocReader());
    readers.push(new td.TSConfigReader());
})
app.on(ApplicationEvents.READER_ARGS, (app, readers) => {
    readers.push(new td.ArgumentsReader());
})

app.bootstrap();

run(app)
    .catch((error) => {
        console.error("TypeDoc exiting with unexpected error:");
        console.error(error);
        return ExitCodes.ExceptionThrown;
    })
    .then((exitCode) => (process.exitCode = exitCode));

/** @param {td.Application} app */
async function run(app) {
    if (app.options.getValue("version")) {
        console.log(app.toString());
        return ExitCodes.Ok;
    }

    if (app.options.getValue("help")) {
        console.log(getOptionsHelp(app.options));
        return ExitCodes.Ok;
    }

    if (app.options.getValue("showConfig")) {
        console.log(app.options.getRawValues());
        return ExitCodes.Ok;
    }

    if (app.logger.hasErrors()) {
        return ExitCodes.OptionError;
    }
    if (
        app.options.getValue("treatWarningsAsErrors") &&
        app.logger.hasWarnings()
    ) {
        return ExitCodes.OptionError;
    }

    if (app.options.getValue("entryPoints").length === 0) {
        app.logger.error("No entry points provided");
        return ExitCodes.NoEntryPoints;
    }

    if (app.options.getValue("watch")) {
        app.convertAndWatch(async (project) => {
            const out = app.options.getValue("out");
            if (out) {
                await app.generateDocs(project, out);
            }
            const json = app.options.getValue("json");
            if (json) {
                await app.generateJson(project, json);
            }

            if (!out && !json) {
                await app.generateDocs(project, "./docs");
            }
        });
        return ExitCodes.Ok;
    }

    const project = app.convert();
    if (!project) {
        return ExitCodes.CompileError;
    }
    if (
        app.options.getValue("treatWarningsAsErrors") &&
        app.logger.hasWarnings()
    ) {
        return ExitCodes.CompileError;
    }

    app.validate(project);
    if (app.logger.hasErrors()) {
        return ExitCodes.ValidationError;
    }
    if (
        app.options.getValue("treatWarningsAsErrors") &&
        app.logger.hasWarnings()
    ) {
        return ExitCodes.ValidationError;
    }

    if (app.options.getValue("emit") !== "none") {
        const out = app.options.getValue("out");
        if (out) {
            await app.generateDocs(project, out);
        }
        const json = app.options.getValue("json");
        if (json) {
            await app.generateJson(project, json);
        }

        if (!out && !json) {
            await app.generateDocs(project, "./docs");
        }

        if (app.logger.hasErrors()) {
            return ExitCodes.OutputError;
        }
        if (
            app.options.getValue("treatWarningsAsErrors") &&
            app.logger.hasWarnings()
        ) {
            return ExitCodes.OutputError;
        }
    }

    return ExitCodes.Ok;
}
